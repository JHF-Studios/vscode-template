{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":160,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":76813.17214865671,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"hacking_exp\":1,\"strength_exp\":1,\"defense_exp\":1,\"dexterity_exp\":1,\"agility_exp\":1,\"charisma_exp\":1,\"company_rep\":1,\"faction_rep\":1,\"crime_money\":1,\"crime_success\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"work_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"phantasy\",\"factions\":[],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":9,\"moneyGainRatePerSecond\":17.462306531249997,\"onlineTimeSeconds\":66133.19999955688,\"ram\":4,\"totalMoneyGenerated\":1024269.5381411875,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":7,\"moneyGainRatePerSecond\":10.8675,\"onlineTimeSeconds\":57962.19999970802,\"ram\":2,\"totalMoneyGenerated\":629801.3654989102,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":7,\"moneyGainRatePerSecond\":10.5,\"onlineTimeSeconds\":57961.99999970802,\"ram\":1,\"totalMoneyGenerated\":608489.6999965345,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":7,\"moneyGainRatePerSecond\":10.5,\"onlineTimeSeconds\":57961.99999970802,\"ram\":1,\"totalMoneyGenerated\":608477.9999965347,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":8,\"moneyGainRatePerSecond\":12,\"onlineTimeSeconds\":57961.79999970803,\"ram\":1,\"totalMoneyGenerated\":695377.500003919,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":7,\"moneyGainRatePerSecond\":10.5,\"onlineTimeSeconds\":57961.599999708036,\"ram\":1,\"totalMoneyGenerated\":608435.0999965352,\"name\":\"hacknet-node-5\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":14620643.969650988,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-14400,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":15565096.991210304,\"hacknet\":4174851.203654946,\"hacknet_expenses\":-705482.7175596267,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":14619530.969650991,\"work\":0,\"servers\":-4200534.50752,\"other\":-200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-14400,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":15565096.991210304,\"hacknet\":4174851.203654946,\"hacknet_expenses\":-705482.7175596267,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":14619530.969650991,\"work\":0,\"servers\":-4200534.50752,\"other\":-200000,\"augmentations\":0}},\"playtimeSinceLastAug\":66457400,\"playtimeSinceLastBitnode\":66457400,\"lastAugReset\":-1,\"lastNodeReset\":-1,\"purchasedServers\":[],\"scriptProdSinceLastAug\":13791926.169769855,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1701290269483},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1701290389482},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1701306404961},{\"ID\":\"TOR\",\"unlockedOn\":1701314204501},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1701316332464}],\"terminalCommandHistory\":[\"connect iron-gym\",\"home\",\"./daem\",\"./daemon.js \",\"scan-analyze \",\"scan-analyze  5\",\"analye\",\"analyze \",\"backdoor\",\"home\",\"./daemon.js \",\"./watcher.js \",\"./daemon.js \",\"connect iron-gym \",\"ls\",\"home\",\"./daemon.js \",\"./watcher.js \",\"./daem\",\"./daemon.js \",\"./watcher.js \",\"./daemon.js \",\"./watcher.js \",\"ls\",\"./testing.js \",\"./daemon.js \",\"./watcher.js \",\"./daemon.js \",\"scan-analyze 5\",\"./watcher.js \",\"./daemon.js \",\"./watcher.js \",\"./daemon.js \",\"scan-analyze 5\",\"ls\",\"./hack.js\",\"analyze\",\"home\",\"./watcher.js \",\"./daemon.js \",\"./watcher.js \",\"./daemon.js \",\"./watcher.js \",\"./daemon.js \",\"./watcher.js \",\"./daemon.js \",\"ls\",\"./daemon.js \",\"scan-analyze 5\",\"analyze \"],\"lastUpdate\":1701356477028,\"lastSave\":1701356475643,\"totalPlaytime\":66457400,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"1d510f5b46a9d0\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"84.4.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"AutoLink.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"spider.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/*a small script to traverse to each server available and hack into them.\\r\\nThe script then copies hack, grow, and weaken onto the server\\r\\n*/\\r\\nfunction getServers(ns, current = 'home', set = new Set()) {\\r\\n    const connections = ns.scan(current);\\r\\n    const next = connections.filter(c => !set.has(c));\\r\\n    next.forEach(n => {\\r\\n        set.add(n);\\r\\n        return getServers(ns, current = n, set);\\r\\n    });\\r\\n    return Array.from(set.keys());\\r\\n}\\r\\nasync function sudo(ns, target) {\\r\\n    try {\\r\\n        await ns.brutessh(target);\\r\\n        await ns.ftpcrack(target);\\r\\n        await ns.relaysmtp(target);\\r\\n        await ns.httpworm(target);\\r\\n        await ns.sqlinject(target);\\r\\n    }\\r\\n    catch {\\r\\n        ns.print(`Failed cracking at least one port on ${target}`);\\r\\n    }\\r\\n    try {\\r\\n        await ns.nuke(target);\\r\\n    }\\r\\n    catch {\\r\\n        ns.print(`Failed to nuke ${target}`);\\r\\n    }\\r\\n    return ns.getServer(target).hasAdminRights;\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    const servers = await getServers(ns);\\r\\n    ns.print(servers);\\r\\n    for (const server of servers) {\\r\\n        ns.print(`Attempting to crack ${server}`);\\r\\n        const success = await sudo(ns, server);\\r\\n        if (success) {\\r\\n            ns.print(`Server ${server} successfully cracked. Copying files to server`);\\r\\n        }\\r\\n        await ns.scp('weaken.js', server, 'home');\\r\\n        await ns.scp('grow.js', server, 'home');\\r\\n        await ns.scp('hack.js', server, 'home');\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BpZGVyLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsic3BpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOztFQUVFO0FBRUYsU0FBUyxVQUFVLENBQUMsRUFBSyxFQUFFLE9BQU8sR0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFDLElBQUksR0FBRyxFQUFFO0lBQ3BELE1BQU0sV0FBVyxHQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0MsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDYixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxVQUFVLENBQUMsRUFBRSxFQUFFLE9BQU8sR0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7QUFDakMsQ0FBQztBQUVELEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTSxFQUFFLE1BQWE7SUFDckMsSUFBRztRQUNDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUIsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDOUI7SUFBQyxNQUFLO1FBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyx3Q0FBd0MsTUFBTSxFQUFFLENBQUMsQ0FBQTtLQUFDO0lBRXBFLElBQUc7UUFDQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDekI7SUFBQyxNQUFNO1FBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUFDO0lBRS9DLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUM7QUFDL0MsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFDOUIsTUFBTSxPQUFPLEdBQWMsTUFBTSxVQUFVLENBQUMsRUFBRSxDQUFjLENBQUM7SUFDN0QsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQixLQUFJLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBQztRQUN4QixFQUFFLENBQUMsS0FBSyxDQUFDLHVCQUF1QixNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2QyxJQUFJLE9BQU8sRUFBQztZQUNSLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxNQUFNLGdEQUFnRCxDQUFDLENBQUE7U0FDN0U7UUFDRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN4QyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUUvQztBQUNMLENBQUMifQ==\",\"filename\":\"spider.js\",\"server\":\"home\"}}],[\"daemon.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const HOUR = 3600000;\\r\\nconst MINUTE = 60000;\\r\\nconst SECOND = 1000;\\r\\n//get all servers that currently have admin rights\\r\\nfunction getServers(ns, current = 'home', set = new Set()) {\\r\\n    const connections = ns.scan(current);\\r\\n    const next = connections.filter(c => !set.has(c));\\r\\n    next.forEach(n => {\\r\\n        set.add(n);\\r\\n        return getServers(ns, current = n, set);\\r\\n    });\\r\\n    return Array.from(set.keys());\\r\\n}\\r\\nexport async function main(ns) {\\r\\n    let target = 'n00dles';\\r\\n    while (true) {\\r\\n        //attempt to crack any previously uncracked servers\\r\\n        //get list of servers \\r\\n        await ns.exec('spider.js', 'home');\\r\\n        ns.print(\\\"Updating servers list...\\\");\\r\\n        let servers = await getServers(ns);\\r\\n        ns.tprint(servers);\\r\\n        //check for new target\\r\\n        ns.print(\\\"Finding best target...\\\");\\r\\n        for (const server of servers) {\\r\\n            ns.tprint(`checking ${server} as possible target`);\\r\\n            if (ns.getServerMaxMoney(server) > ns.getServerMaxMoney(target) && ns.getServerRequiredHackingLevel(server) < ns.getHackingLevel()) {\\r\\n                ns.print(`Target set to ${server} with max money of ${ns.getServerMaxMoney(server).toLocaleString(\\\"en-US\\\", { style: \\\"currency\\\", currency: \\\"USD\\\" })}`);\\r\\n                target = server;\\r\\n            }\\r\\n        }\\r\\n        //set minSec to targets lowest security\\r\\n        const MINSEC = ns.getServerMinSecurityLevel(target);\\r\\n        //remove servers without root permission from list\\r\\n        servers = servers.filter(c => { return ns.getServer(c).hasAdminRights && ns.getServerMaxRam(c) !== 0 && c !== 'home'; });\\r\\n        ns.tprint(\\\"Current available servers: \\\" + servers);\\r\\n        ns.tprint(`There should be ${servers.length} servers running`);\\r\\n        //begin loop\\r\\n        ns.print(\\\"Setting up game loop\\\");\\r\\n        const lastUpdate = Date.now();\\r\\n        const maxMoney = await ns.getServerMaxMoney(target);\\r\\n        while (true) {\\r\\n            const currentMoney = await ns.getServerMoneyAvailable(target);\\r\\n            const currentSecurity = await ns.getServerSecurityLevel(target);\\r\\n            let action = 'waiting';\\r\\n            for (const server of servers) {\\r\\n                ns.tprint(`Currently setting action on server ${server}`);\\r\\n                //get available threads for hacking\\r\\n                const serverMaxRam = await ns.getServerMaxRam(server);\\r\\n                const usedRam = await ns.getServerUsedRam(server);\\r\\n                if (currentSecurity > MINSEC) {\\r\\n                    const scriptCost = await ns.getScriptRam('weaken.js');\\r\\n                    ns.print(\\\"cost of action: \\\" + Math.ceil(scriptCost));\\r\\n                    const threads = Math.floor((serverMaxRam - usedRam) / Math.ceil(scriptCost));\\r\\n                    action = 'weaken';\\r\\n                    if (threads == 0) {\\r\\n                        action = '';\\r\\n                        break; // Servers did not finish in time, sleep again\\r\\n                    }\\r\\n                    ns.exec('weaken.js', server, threads, '--target', target);\\r\\n                }\\r\\n                else if (currentMoney < maxMoney * 0.8) {\\r\\n                    const scriptCost = await ns.getScriptRam('grow.js');\\r\\n                    ns.print(\\\"cost of action: \\\" + Math.ceil(scriptCost));\\r\\n                    const threads = Math.floor((serverMaxRam - usedRam) / Math.ceil(scriptCost));\\r\\n                    action = 'grow';\\r\\n                    if (threads == 0) {\\r\\n                        action = '';\\r\\n                        break; // Servers did not finish in time, sleep again\\r\\n                    }\\r\\n                    ns.exec('grow.js', server, threads, '--target', target);\\r\\n                }\\r\\n                else {\\r\\n                    const scriptCost = await ns.getScriptRam('hack.js');\\r\\n                    ns.print(\\\"cost of action: \\\" + Math.ceil(scriptCost));\\r\\n                    const threads = Math.floor((serverMaxRam - usedRam) / Math.ceil(scriptCost));\\r\\n                    action = 'hack';\\r\\n                    if (threads == 0) {\\r\\n                        action = '';\\r\\n                        break; // Servers did not finish in time, sleep again\\r\\n                    }\\r\\n                    ns.exec('hack.js', server, threads, '--target', target);\\r\\n                }\\r\\n            }\\r\\n            let sleepTime = 0;\\r\\n            switch (action) {\\r\\n                case 'hack':\\r\\n                    ns.print(\\\"setting sleep to hack time\\\");\\r\\n                    sleepTime = await ns.getHackTime(target) + SECOND;\\r\\n                    break;\\r\\n                case 'weaken':\\r\\n                    ns.print(\\\"Setting sleep to weaken time\\\");\\r\\n                    sleepTime = await ns.getWeakenTime(target) + SECOND;\\r\\n                    break;\\r\\n                case 'grow':\\r\\n                    ns.print(\\\"Setting sleep to grow time\\\");\\r\\n                    sleepTime = await ns.getGrowTime(target) + SECOND;\\r\\n                    break;\\r\\n                default:\\r\\n                    ns.print(\\\"Setting sleep to default time\\\");\\r\\n                    action = 'waiting';\\r\\n                    sleepTime = MINUTE; //sleep for one minute by defualt\\r\\n                    break;\\r\\n            }\\r\\n            ns.print(`Going to sleep with current target information: money: ${Math.floor(currentMoney).toLocaleString(\\\"en-US\\\", { style: \\\"currency\\\", currency: \\\"USD\\\" })} security: ${Math.floor(currentSecurity)}`);\\r\\n            await ns.sleep(sleepTime + SECOND);\\r\\n            if (lastUpdate + HOUR <= Date.now() && action !== 'waiting') {\\r\\n                ns.print(\\\"An hour has passed. Updating information...\\\");\\r\\n                break; // an hour has passed, update information and restart loop\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    //find best target in list of cracked servers\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFlbW9uLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiZGFlbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQztBQUNyQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDckIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBRXBCLGtEQUFrRDtBQUNsRCxTQUFTLFVBQVUsQ0FBQyxFQUFLLEVBQUUsT0FBTyxHQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUMsSUFBSSxHQUFHLEVBQUU7SUFDcEQsTUFBTSxXQUFXLEdBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNiLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWCxPQUFPLFVBQVUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxHQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUNqQyxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBSztJQUM5QixJQUFJLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDdkIsT0FBTSxJQUFJLEVBQUM7UUFDVCxtREFBbUQ7UUFDbkQsc0JBQXNCO1FBQ3RCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkMsRUFBRSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ3JDLElBQUksT0FBTyxHQUFjLE1BQU0sVUFBVSxDQUFDLEVBQUUsQ0FBYyxDQUFDO1FBQzNELEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkIsc0JBQXNCO1FBQ3RCLEVBQUUsQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtRQUNsQyxLQUFJLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBQztZQUN4QixFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksTUFBTSxxQkFBcUIsQ0FBQyxDQUFBO1lBQ2xELElBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQWUsRUFBRSxFQUFDO2dCQUM5SCxFQUFFLENBQUMsS0FBSyxDQUFDLGlCQUFpQixNQUFNLHNCQUFzQixFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxFQUFDLEtBQUssRUFBQyxVQUFVLEVBQUUsUUFBUSxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNsSixNQUFNLEdBQUcsTUFBTSxDQUFDO2FBQ25CO1NBRUo7UUFDRCx1Q0FBdUM7UUFDdkMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXBELGtEQUFrRDtRQUNsRCxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFFLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLE1BQU0sQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFBO1FBQ3JILEVBQUUsQ0FBQyxNQUFNLENBQUMsNkJBQTZCLEdBQUcsT0FBTyxDQUFDLENBQUE7UUFDbEQsRUFBRSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsT0FBTyxDQUFDLE1BQU0sa0JBQWtCLENBQUMsQ0FBQTtRQUM5RCxZQUFZO1FBQ1osRUFBRSxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sVUFBVSxHQUFXLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN0QyxNQUFNLFFBQVEsR0FBVyxNQUFNLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RCxPQUFNLElBQUksRUFBQztZQUNQLE1BQU0sWUFBWSxHQUFXLE1BQU0sRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RFLE1BQU0sZUFBZSxHQUFXLE1BQU0sRUFBRSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hFLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztZQUN2QixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBQztnQkFDekIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzQ0FBc0MsTUFBTSxFQUFFLENBQUMsQ0FBQTtnQkFDN0QsbUNBQW1DO2dCQUNuQyxNQUFNLFlBQVksR0FBVyxNQUFNLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzlELE1BQU0sT0FBTyxHQUFXLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUUxRCxJQUFJLGVBQWUsR0FBRyxNQUFNLEVBQUM7b0JBQ3pCLE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDdEQsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQ3JELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUM3RSxNQUFNLEdBQUcsUUFBUSxDQUFBO29CQUNqQixJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUU7d0JBQ2xCLE1BQU0sR0FBRyxFQUFFLENBQUM7d0JBQ1osTUFBTSxDQUFDLDhDQUE4QztxQkFDcEQ7b0JBQ0QsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQzdEO3FCQUFNLElBQUcsWUFBWSxHQUFHLFFBQVEsR0FBRyxHQUFHLEVBQUM7b0JBQ3BDLE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDcEQsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQ3JELE1BQU0sT0FBTyxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUNyRixNQUFNLEdBQUcsTUFBTSxDQUFDO29CQUNoQixJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUU7d0JBQ2xCLE1BQU0sR0FBRyxFQUFFLENBQUM7d0JBQ1osTUFBTSxDQUFDLDhDQUE4QztxQkFDcEQ7b0JBQ0QsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQzNEO3FCQUFLO29CQUNGLE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDcEQsRUFBRSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQ3JELE1BQU0sT0FBTyxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUNyRixNQUFNLEdBQUcsTUFBTSxDQUFDO29CQUNoQixJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUU7d0JBQ2xCLE1BQU0sR0FBRyxFQUFFLENBQUM7d0JBQ1osTUFBTSxDQUFDLDhDQUE4QztxQkFDcEQ7b0JBQ0QsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUE7aUJBQzFEO2FBQ0E7WUFDRCxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFDbEIsUUFBTyxNQUFNLEVBQUM7Z0JBQ2QsS0FBSyxNQUFNO29CQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtvQkFDbEMsU0FBUyxHQUFHLE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7b0JBQ2xELE1BQU07Z0JBQ1YsS0FBSyxRQUFRO29CQUNiLEVBQUUsQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQTtvQkFDcEMsU0FBUyxHQUFHLE1BQU0sRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7b0JBQ3BELE1BQU07Z0JBQ1YsS0FBSyxNQUFNO29CQUNYLEVBQUUsQ0FBQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtvQkFDbEMsU0FBUyxHQUFHLE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7b0JBQ2xELE1BQU07Z0JBQ1Y7b0JBQ0ksRUFBRSxDQUFDLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO29CQUMxQyxNQUFNLEdBQUcsU0FBUyxDQUFDO29CQUNuQixTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsaUNBQWlDO29CQUNyRCxNQUFNO2FBQ1Q7WUFDRCxFQUFFLENBQUMsS0FBSyxDQUFDLDBEQUEwRCxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsRUFBQyxLQUFLLEVBQUMsVUFBVSxFQUFFLFFBQVEsRUFBQyxLQUFLLEVBQUMsQ0FBQyxjQUFjLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BNLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUMsTUFBTSxDQUFDLENBQUM7WUFDakMsSUFBRyxVQUFVLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFDO2dCQUN2RCxFQUFFLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUE7Z0JBQ3ZELE1BQU0sQ0FBQywwREFBMEQ7YUFDcEU7U0FFSjtLQUNGO0lBR0MsNkNBQTZDO0FBSWpELENBQUMifQ==\",\"filename\":\"daemon.js\",\"server\":\"home\"}}],[\"lib.server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport default class Server{\\n  constructor(ns, hostname){\\n    this.ns = ns;\\n    this.id = hostname;\\n  }\\n\\n  getID() {return this.id;}\\n\\n  get data() {return this.ns.getServer(id);}\\n\\n  async sudo(ns) {\\n    try{\\n      await ns.brutessh(this.id);\\n    } catch {}\\n    try{\\n      await ns.nuke();\\n    } catch{}\\n  }\\n}\",\"filename\":\"lib.server.js\",\"server\":\"home\"}}],[\"copyServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    //\\r\\n    const servers = ns.getPurchasedServers();\\r\\n    const file = \\\"hack.js\\\";\\r\\n    for (let i = 0; i < servers.length; i++) {\\r\\n        await ns.scp(file, servers[i], \\\"home\\\");\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weVNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJjb3B5U2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLEVBQUU7SUFDRixNQUFNLE9BQU8sR0FBbUIsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDekQsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDO0lBRXZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzFDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"copyServers.js\",\"server\":\"home\"}}],[\"deletefiles.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    //\\r\\n    const servers = ns.getPurchasedServers();\\r\\n    const files = [\\\"hack.js\\\", \\\"run.js\\\"];\\r\\n    for (let i = 0; i < servers.length; i++) {\\r\\n        ns.rm(files.toString(), servers[i]);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlZmlsZXMuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJkZWxldGVmaWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLEVBQUU7SUFDRixNQUFNLE9BQU8sR0FBYyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNwRCxNQUFNLEtBQUssR0FBYyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUUvQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2QztBQUNMLENBQUMifQ==\",\"filename\":\"deletefiles.js\",\"server\":\"home\"}}],[\"getservers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    //\\r\\n    const player = ns.getPlayer();\\r\\n    const money = player.money;\\r\\n    const ramExponent = 1;\\r\\n    const ram = 2 ** ramExponent;\\r\\n    const newServer = ns.getPurchasedServerCost(ram);\\r\\n    const serverMax = ns.getPurchasedServerLimit();\\r\\n    const servers = ns.getPurchasedServers();\\r\\n    let serverNum = servers.length;\\r\\n    while (serverNum < serverMax) {\\r\\n        if ((newServer < (money / 2))) {\\r\\n            ns.purchaseServer(\\\"Jester\\\" + serverNum, ram);\\r\\n            serverNum++;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0c2VydmVycy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdldHNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixFQUFFO0lBQ0YsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzlCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDM0IsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUM7SUFDN0IsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQy9DLE1BQU0sT0FBTyxHQUFrQixFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUN4RCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBRS9CLE9BQU8sU0FBUyxHQUFHLFNBQVMsRUFBRTtRQUUxQixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFFM0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLFNBQVMsRUFBRSxDQUFDO1NBQ2Y7S0FDSjtBQUNMLENBQUMifQ==\",\"filename\":\"getservers.js\",\"server\":\"home\"}}],[\"run.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    //\\r\\n    const flags = ns.flags([\\r\\n        ['script', 'hack.js'],\\r\\n    ]);\\r\\n    const servers = ns.getPurchasedServers();\\r\\n    const script = flags.script.toString();\\r\\n    let threads = 1;\\r\\n    for (let i = 0; i < servers.length; i++) {\\r\\n        const server = ns.getServer(servers[i]);\\r\\n        threads = Math.floor((server.maxRam - server.ramUsed) / ns.getScriptRam(script));\\r\\n        ns.exec(script, servers[i], threads);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsicnVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFDOUIsRUFBRTtJQUNGLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDbkIsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDO0tBQ3hCLENBQUMsQ0FBQztJQUNILE1BQU0sT0FBTyxHQUFjLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdkMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBRWhCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDakYsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3hDO0FBQ0wsQ0FBQyJ9\",\"filename\":\"run.js\",\"server\":\"home\"}}],[\"homeserver.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\r\\n//mport { NS } from '@ns'\\r\\n//\\r\\n//xport async function main(ns : NS) : Promise<void> {\\r\\n//   //\\r\\n//   const player = ns.getPlayer();\\r\\n//   const money = player.money;\\r\\n//   const homeRamCost = ns.getUpgradeHomeRamCost();\\r\\n//   const homeCPUCost = ns.getUpgradeHomeCoresCost();\\r\\n//\\r\\n//   while (true) {\\r\\n//    \\r\\n//       homeRamCost = ns.getUpgradeHomeRamCost();\\r\\n//       homeCPUCost = ns.getUpgradeHomeCoresCost();\\r\\n//\\r\\n//       if ((homeRamCost < (player.money / 2)) || (homeCPUCost < (player.money / 2))) {\\r\\n//           \\r\\n//           if (homeRamCost < homeCPUCost) {\\r\\n//               ns.upgradeHomeRam();\\r\\n//               ns.tprint(\\\"Ram Upgraded!\\\");\\r\\n//           } else {\\r\\n//               ns.upgradeHomeCores();\\r\\n//               ns.tprint(\\\"CPU Upgraded!\\\")\\r\\n//           }\\r\\n//       }   \\r\\n//\\r\\n//       ns.sleep(1800000)\\r\\n//   }\\r\\n//\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9tZXNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhvbWVzZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlCQUF5QjtBQUN6QixFQUFFO0FBQ0Ysc0RBQXNEO0FBQ3RELE9BQU87QUFDUCxtQ0FBbUM7QUFDbkMsZ0NBQWdDO0FBQ2hDLG9EQUFvRDtBQUNwRCxzREFBc0Q7QUFDdEQsRUFBRTtBQUNGLG1CQUFtQjtBQUNuQixNQUFNO0FBQ04sa0RBQWtEO0FBQ2xELG9EQUFvRDtBQUNwRCxFQUFFO0FBQ0Ysd0ZBQXdGO0FBQ3hGLGFBQWE7QUFDYiw2Q0FBNkM7QUFDN0MscUNBQXFDO0FBQ3JDLDRDQUE0QztBQUM1QyxxQkFBcUI7QUFDckIsdUNBQXVDO0FBQ3ZDLDJDQUEyQztBQUMzQyxjQUFjO0FBQ2QsYUFBYTtBQUNiLEVBQUU7QUFDRiwwQkFBMEI7QUFDMUIsTUFBTTtBQUNOLEVBQUUifQ==\",\"filename\":\"homeserver.js\",\"server\":\"home\"}}],[\"serverstats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    //\\r\\n    const servers = ns.getPurchasedServers();\\r\\n    for (let i = 0; i < servers.length; i++) {\\r\\n        const server = ns.getServer(servers[i]);\\r\\n        ns.tprint(\\\"Hostname: \\\" + server.hostname, \\\" MaxRAM: \\\" + server.maxRam);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyc3RhdHMuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJzZXJ2ZXJzdGF0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLEVBQUU7SUFDRixNQUFNLE9BQU8sR0FBa0IsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFFeEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDekMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7S0FDckU7QUFDTCxDQUFDIn0=\",\"filename\":\"serverstats.js\",\"server\":\"home\"}}],[\"watcher.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const hashes = {};\\r\\n    const files = ns.ls('home', '.js');\\r\\n    for (const file of files) {\\r\\n        const contents = ns.read(file);\\r\\n        hashes[file] = getHash(contents);\\r\\n    }\\r\\n    while (true) {\\r\\n        const files = ns.ls('home', '.js');\\r\\n        for (const file of files) {\\r\\n            const contents = ns.read(file);\\r\\n            const hash = getHash(contents);\\r\\n            if (hash != hashes[file]) {\\r\\n                ns.tprintf(`INFO: Detected change in ${file}`);\\r\\n                const processes = ns.ps().filter((p) => {\\r\\n                    return p.filename == file;\\r\\n                });\\r\\n                for (const process of processes) {\\r\\n                    ns.tprintf(`INFO: Restarting ${process.filename} ${process.args} -t ${process.threads}`);\\r\\n                    if (process.filename != ns.getScriptName()) {\\r\\n                        ns.kill(process.pid);\\r\\n                        ns.run(process.filename, process.threads, ...process.args);\\r\\n                    }\\r\\n                    else {\\r\\n                        ns.spawn(process.filename, process.threads, ...process.args);\\r\\n                    }\\r\\n                }\\r\\n                hashes[file] = hash;\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\nconst getHash = (input) => {\\r\\n    let hash = 0, i, chr;\\r\\n    if (input.length === 0)\\r\\n        return hash;\\r\\n    for (i = 0; i < input.length; i++) {\\r\\n        chr = input.charCodeAt(i);\\r\\n        hash = ((hash << 5) - hash) + chr;\\r\\n        hash |= 0; // Convert to 32bit integer\\r\\n    }\\r\\n    return hash;\\r\\n};\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbIndhdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixNQUFNLE1BQU0sR0FBMEIsRUFBRSxDQUFBO0lBRXhDLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ2xDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtLQUNuQztJQUVELE9BQU8sSUFBSSxFQUFFO1FBQ1QsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFFbEMsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDdEIsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUM5QixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7WUFFOUIsSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN0QixFQUFFLENBQUMsT0FBTyxDQUFDLDRCQUE0QixJQUFJLEVBQUUsQ0FBQyxDQUFBO2dCQUU5QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBYyxFQUFFLEVBQUU7b0JBQ2hELE9BQU8sQ0FBQyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUE7Z0JBQzdCLENBQUMsQ0FBQyxDQUFBO2dCQUVGLEtBQUssTUFBTSxPQUFPLElBQUksU0FBUyxFQUFFO29CQUM3QixFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFvQixPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxJQUFJLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7b0JBQ3hGLElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsYUFBYSxFQUFFLEVBQUU7d0JBQ3hDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO3dCQUNwQixFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtxQkFDN0Q7eUJBQU07d0JBQ0gsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7cUJBQy9EO2lCQUNKO2dCQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUE7YUFDdEI7U0FDSjtRQUVELE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUN2QjtBQUNMLENBQUM7QUFFRCxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQWEsRUFBVSxFQUFFO0lBQ3RDLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFBO0lBQ3BCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUE7SUFDbkMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQy9CLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3pCLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQTtRQUNqQyxJQUFJLElBQUksQ0FBQyxDQUFBLENBQUMsMkJBQTJCO0tBQ3hDO0lBQ0QsT0FBTyxJQUFJLENBQUE7QUFDZixDQUFDLENBQUEifQ==\",\"filename\":\"watcher.js\",\"server\":\"home\"}}],[\"upgradeservers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    //\\r\\n    const servers = ns.getPurchasedServers();\\r\\n    let serverRAM = 2;\\r\\n    const player = ns.getPlayer();\\r\\n    const playerMoney = player.money;\\r\\n    let serverUpgradeCost = 0;\\r\\n    while (serverUpgradeCost <= playerMoney / 2) {\\r\\n        for (let i = 0; i < servers.length; i++) {\\r\\n            serverUpgradeCost = ns.getPurchasedServerUpgradeCost(servers[i], serverRAM);\\r\\n            ns.upgradePurchasedServer(servers[i], serverRAM);\\r\\n        }\\r\\n        serverRAM = serverRAM * 2;\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZXNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJ1cGdyYWRlc2VydmVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQzlCLEVBQUU7SUFDRixNQUFNLE9BQU8sR0FBbUIsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDekQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUM5QixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2pDLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0lBRTFCLE9BQU8saUJBQWlCLElBQUksV0FBVyxHQUFHLENBQUMsRUFBRTtRQUN6QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxpQkFBaUIsR0FBRyxFQUFFLENBQUMsNkJBQTZCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQzVFLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDcEQ7UUFDTCxTQUFTLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQztLQUN6QjtBQUNMLENBQUMifQ==\",\"filename\":\"upgradeservers.js\",\"server\":\"home\"}}],[\"testing.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    ns.exec('hack.js', 'home', 1, \\\"--target\\\", \\\"foodnstuff\\\", \\\"--persist\\\", true);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbInRlc3RpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUM5QixFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBRSxDQUFDO0FBQ2hGLENBQUMifQ==\",\"filename\":\"testing.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"watcher.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3245.2099999992397,\"ramUsage\":5.5,\"server\":\"home\",\"scriptKey\":\"watcher.js*[]\",\"title\":\"watcher.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"daemon.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":6,\"server\":\"home\",\"scriptKey\":\"daemon.js*[]\",\"title\":\"daemon.js \",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"85.7.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"ecorp\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"ecorp\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"ecorp\"}}]]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55577448638,\"moneyMax\":1389436215950,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1295,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-959469.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,1,4,2,2,1,2,4,2,1,1,2,3,3,6,6,2,2,3,4,5,1,3],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"31.4.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"megacorp\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"megacorp\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"megacorp\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":54805074723,\"moneyMax\":1370126868075,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1337,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-990599.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9zyXAS6uRz1270M5v3Qx830653t2I871h793QJJ463pwX424Se0U445JWbWU\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"25.3.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"b-and-a\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"b-and-a\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"b-and-a\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":28431827587,\"moneyMax\":710795689675,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1131,\"serverGrowth\":73,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"93.9.5.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"blade\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"blade\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":20308815243,\"moneyMax\":507720381075,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1104,\"serverGrowth\":62,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"32.6.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"nwo\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"nwo\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"nwo\"}}]]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":28414606244,\"moneyMax\":710365156100,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1196,\"serverGrowth\":70,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"53.8.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"clarkinc\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"clarkinc\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"clarkinc\"}}]]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":20404672331,\"moneyMax\":510116808275,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1079,\"serverGrowth\":70,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"21.8.8.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"omnitek\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"omnitek\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":17337933297,\"moneyMax\":433448332425,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":954,\"serverGrowth\":96,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"41.2.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"4sigma\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"4sigma\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"4sigma\"}}]]},\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":20507396292,\"moneyMax\":512684907300,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":990,\"serverGrowth\":88,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"76.5.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"kuai-gong\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"kuai-gong\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"kuai-gong\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":29055949185,\"moneyMax\":726398729625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1271,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-454151.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,7],[3,6],[2,8],[1,9],[7,12],[14,24],[2,7],[17,24],[7,15],[13,22],[13,19],[12,21],[4,5]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-490188.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"LOGIC EMAIL TABLE FLASH PASTE\",9],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"10.3.2.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"fulcrumtech\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"fulcrumtech\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1570636285,\"moneyMax\":39265907125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1120,\"serverGrowth\":85,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"66.0.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"fulcrumassets\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"fulcrumassets\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"fulcrumassets\"}}]]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1122,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"38.1.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"stormtech\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"stormtech\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"stormtech\"}}]]},\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1000195348,\"moneyMax\":25004883700,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1050,\"serverGrowth\":74,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"46.6.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"defcomm\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"defcomm\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"defcomm\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":880013964,\"moneyMax\":22000349100,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1029,\"serverGrowth\":51,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"35.6.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"infocomm\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"infocomm\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"infocomm\"}}]]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":637563954,\"moneyMax\":15939098850,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":889,\"serverGrowth\":75,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"20.7.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"helios\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"helios\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":667688811,\"moneyMax\":16692220275,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":838,\"serverGrowth\":73,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-807909.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[195,35,37,111,178,126,29,35,53,6,27,85,63],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"83.7.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"vitalife\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"vitalife\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":786890465,\"moneyMax\":19672261625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":848,\"serverGrowth\":63,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"19.3.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"icarus\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"icarus\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"icarus\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":967742812,\"moneyMax\":24193570300,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":920,\"serverGrowth\":85,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"52.4.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"univ-energy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"univ-energy\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1100426803,\"moneyMax\":27510670075,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":803,\"serverGrowth\":90,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"43.9.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"titan-labs\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"titan-labs\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":873254463,\"moneyMax\":21831361575,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":868,\"serverGrowth\":60,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-861958.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[30,46,40],[48,10,38],[21,33,14],[32,19,36],[21,24,28]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"60.8.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"microdyne\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"microdyne\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":600135556,\"moneyMax\":15003388900,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":844,\"serverGrowth\":89,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-565995.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,0,0,8,0,0,3,5,9,1,4,2,2,5,0,10],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"36.0.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"taiyang-digital\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"taiyang-digital\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"taiyang-digital\"}}]]},\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":849721258,\"moneyMax\":21243031450,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":902,\"serverGrowth\":72,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-899482.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":452560194,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"70.1.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"galactic-cyber\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"galactic-cyber\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"galactic-cyber\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":811156515,\"moneyMax\":20278912875,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":863,\"serverGrowth\":90,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"61.2.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"aerocorp\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"aerocorp\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"aerocorp\"}}]]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1045899422,\"moneyMax\":26147485550,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":912,\"serverGrowth\":65,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"47.2.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"omnia\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"omnia\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":981176016,\"moneyMax\":24529400400,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":939,\"serverGrowth\":65,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"5.3.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"zb-def\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"zb-def\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"zb-def\"}}]]},\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":984371698,\"moneyMax\":24609292450,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":802,\"serverGrowth\":68,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"77.4.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"applied-energetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"applied-energetics\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"applied-energetics\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":798638999,\"moneyMax\":19965974975,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":810,\"serverGrowth\":71,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"42.2.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"solaris\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"solaris\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":868851245,\"moneyMax\":21721281125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":834,\"serverGrowth\":77,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"0.9.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"deltaone\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"deltaone\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"deltaone\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1611207466,\"moneyMax\":40280186650,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":839,\"serverGrowth\":57,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"31.8.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"global-pharm\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"global-pharm\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1591881957,\"moneyMax\":39797048925,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":793,\"serverGrowth\":83,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"81.8.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"nova-med\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"nova-med\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"nova-med\"}}]]},\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1245675169,\"moneyMax\":31141879225,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":842,\"serverGrowth\":81,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-290306.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,15],[9,15],[11,20]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-807042.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[119,188,80,162,35,38,102,96,92,31,126,65,129,105,58,33,24,57,8,175,128,5,47,84,14,63,61,199,126,105,127,130,121,81,155,113,27,76,188,10,168,38,92],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"68.6.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"zeus-med\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"zeus-med\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"zeus-med\"}}]]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1436879047,\"moneyMax\":35921976175,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":833,\"serverGrowth\":72,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"82.2.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"unitalife\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"unitalife\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1018101865,\"moneyMax\":25452546625,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":823,\"serverGrowth\":77,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"0.4.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"lexo-corp\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"lexo-corp\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":767432313,\"moneyMax\":19185807825,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":723,\"serverGrowth\":64,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"49.9.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"rho-construction\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"rho-construction\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":635479966,\"moneyMax\":15886999150,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":492,\"serverGrowth\":58,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"89.7.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"alpha-ent\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"alpha-ent\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":737439483,\"moneyMax\":18435987075,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":544,\"serverGrowth\":60,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347136.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[29,18,5,34,26,16,28,18,46,9,13,2,24,4],[43,26,8,34,4,43,7,7,37,20,38,39,36,11],[9,2,40,42,9,33,33,36,34,33,29,30,41,8],[48,16,36,14,46,41,1,40,44,5,11,41,5,35],[13,5,48,47,8,33,49,31,39,23,29,28,27,45],[6,4,7,3,25,8,39,40,27,18,32,24,47,5],[4,31,5,1,18,1,19,41,7,40,6,44,46,25],[49,27,19,33,5,36,29,21,7,15,20,4,12,36],[44,35,35,9,44,13,16,38,50,31,24,29,30,16]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"56.8.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"aevum-police\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"aevum-police\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":369969624,\"moneyMax\":9249240600,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":421,\"serverGrowth\":38,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"84.7.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"rothman-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"rothman-uni\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":233845849,\"moneyMax\":5846146225,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":423,\"serverGrowth\":41,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"91.6.1.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"zb-institute\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"zb-institute\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":915942127,\"moneyMax\":22898553175,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":725,\"serverGrowth\":82,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-338469.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[8,6,-1,-9,7,4,-4,-10,2,-5,10,-9,6,-9,-4,10,3,-10,5,-8,8,7,1,3,-1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"23.9.5.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"summit-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"summit-uni\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":288772476,\"moneyMax\":7219311900,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":427,\"serverGrowth\":56,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"55.5.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"syscore\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"syscore\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"syscore\"}}]]},\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":556426250,\"moneyMax\":13910656250,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":567,\"serverGrowth\":67,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"19.9.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"catalyst\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"catalyst\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":353632509,\"moneyMax\":8840812725,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":435,\"serverGrowth\":43,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"2.5.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":191946041,\"moneyMax\":4798651025,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":295,\"serverGrowth\":47,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":32,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"14.6.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"computek\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"computek\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"computek\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":221611179,\"moneyMax\":5540279475,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":392,\"serverGrowth\":57,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"4.2.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"netlink\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"netlink\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":394,\"serverGrowth\":72,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"35.1.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"johnson-ortho\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"johnson-ortho\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":75137029,\"moneyMax\":1878425725,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":281,\"serverGrowth\":36,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"99.2.1.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.002,\"minDifficulty\":1,\"moneyAvailable\":1742781.25,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"57.5.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.753999999999998,\"minDifficulty\":3,\"moneyAvailable\":1984986.780840278,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":8,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"59.1.5.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":8,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"18.2.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":8,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"65.2.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":16,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"26.3.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":8,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-772317.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"93wVk3wtCH648l55h4iHN113X2y8852d28t613SHu5868zAuBV4123I\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"10.3.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":16,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"20.5.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":32,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"54.3.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":8,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"32.3.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":8,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-526046.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[78,71,158,171,134,54,42,145,93,198,197,61,142,123,50,21,134,118,143,163,78,36,88,43,51,80,136,25,139,187,44,181,3,55,26,38,45,124,26,13,183]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"42.4.3.1\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"zer0\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":197127587.89282644,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":16,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"5.0.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":16,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"55.2.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":63359567,\"moneyMax\":1583989175,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":218,\"serverGrowth\":37,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":16,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"81.6.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"crush-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"crush-fitness\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":54047527,\"moneyMax\":1351188175,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":227,\"serverGrowth\":32,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-711575.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[26,123,95,35,157,8,29,167,2,62,113,33,178,122,52,21,171,37,147,159,106,43,3]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"58.4.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":16,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"91.4.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"millenium-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"millenium-fitness\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":520,\"serverGrowth\":28,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"25.1.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"powerhouse-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"powerhouse-fitness\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\".\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":983,\"serverGrowth\":56,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"48.0.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"snap-fitness\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"snap-fitness\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"snap-fitness\"}}]]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":765,\"serverGrowth\":50,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-299505.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,1],[0,0,1,0,1,0],[0,0,0,0,0,1],[0,0,0,0,0,1],[0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"44.4.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"run4theh111z\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"run4theh111z\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":526,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-445050.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[19,27],[24,26],[19,28],[14,24],[18,24],[6,14],[1,9],[23,26]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"29.0.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"computek\",\"lexo-corp\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":346,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"63.1.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":32,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"7.0.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\".\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\".\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":545,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"65.1.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":58,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"--target\",\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.0099999999969,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"weaken.js*[\\\"--target\\\",\\\"silver-helix\\\"]\",\"title\":\"weaken.js --target silver-helix\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"70.8.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"The-Cave\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"The-Cave\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"The-Cave\"}}]]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"11.9.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"50.7.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.weaken(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vha2VuLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsid2Vha2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU87SUFFOUIsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDckIsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO0tBQ3JCLENBQUMsQ0FBQTtJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxjQUFjLElBQUksQ0FBQyxPQUFPLGVBQWUsT0FBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0YsR0FBRTtRQUNFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDM0MsUUFBTSxJQUFJLENBQUMsT0FBTyxFQUFDO0FBRXhCLENBQUMifQ==\",\"filename\":\"weaken.js\",\"server\":\"darkweb\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.grow(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"grow.js\",\"server\":\"darkweb\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const args = ns.flags([\\r\\n        ['target', 'n00dles'],\\r\\n        ['persist', false],\\r\\n    ]);\\r\\n    ns.print(`Target: ${args.target}, Persist: ${args.persist} with type: ${typeof (args.persist)}`);\\r\\n    do {\\r\\n        await ns.hack(args.target.toString());\\r\\n    } while (args.persist);\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFjay5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImhhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUU5QixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2xCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztRQUNyQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7S0FDckIsQ0FBQyxDQUFBO0lBQ0YsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxNQUFNLGNBQWMsSUFBSSxDQUFDLE9BQU8sZUFBZSxPQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvRixHQUFFO1FBQ0UsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztLQUN6QyxRQUFNLElBQUksQ0FBQyxPQUFPLEVBQUM7QUFFeEIsQ0FBQyJ9\",\"filename\":\"hack.js\",\"server\":\"darkweb\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-7,\"y\":2,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1701356477058","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}